From c351c969c7f537305d18c37af23b983a40c77391 Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Tue, 4 Mar 2025 07:28:41 +0100
Subject: [PATCH] Support enabling features by environment variable

This adds new environment variable `ZED_ENABLE_EXPERIMENTAL_FEATURES`
that accepts comma-separated list of features:

	ZED_ENABLE_EXPERIMENTAL_FEATURES=feat1,feat2 zed

Names of all existing features can be found in
`crates/feature_flags/src/feature_flags.rs`. Note that some features may
be broken or require proprietary remote services which you are not
allowed to access.

This patch also removes the ability to disable features at runtime.
---
 crates/feature_flags/src/feature_flags.rs |  4 +++-
 crates/zed/src/main.rs                    | 23 ++++++++++++++++++++++-
 2 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/crates/feature_flags/src/feature_flags.rs b/crates/feature_flags/src/feature_flags.rs
index effb3cda3100..dc0a52f19093 100644
--- a/crates/feature_flags/src/feature_flags.rs
+++ b/crates/feature_flags/src/feature_flags.rs
@@ -171,7 +171,9 @@ impl FeatureFlagAppExt for App {
     fn update_flags(&mut self, staff: bool, flags: Vec<String>) {
         let feature_flags = self.default_global::<FeatureFlags>();
         feature_flags.staff = staff;
-        feature_flags.flags = flags;
+        feature_flags.flags.extend(flags);
+        feature_flags.flags.sort();
+        feature_flags.flags.dedup();
     }
 
     fn set_staff(&mut self, staff: bool) {
diff --git a/crates/zed/src/main.rs b/crates/zed/src/main.rs
index 0f34b5477757..787f5d346304 100644
--- a/crates/zed/src/main.rs
+++ b/crates/zed/src/main.rs
@@ -16,6 +16,7 @@ use db::kvp::{GLOBAL_KEY_VALUE_STORE, KEY_VALUE_STORE};
 use editor::Editor;
 use extension::ExtensionHostProxy;
 use extension_host::ExtensionStore;
+use feature_flags::FeatureFlagAppExt;
 use fs::{Fs, RealFs};
 use futures::{StreamExt, future};
 use git::GitHostingProviderRegistry;
@@ -37,7 +38,7 @@ use release_channel::{AppCommitSha, AppVersion, ReleaseChannel};
 use session::{AppSession, Session};
 use settings::{Settings, SettingsStore, watch_config_file};
 use std::{
-    env,
+    env::{self, VarError},
     io::{self, IsTerminal},
     path::{Path, PathBuf},
     process,
@@ -588,6 +589,26 @@ fn main() {
         cx.set_menus(app_menus());
         initialize_workspace(app_state.clone(), prompt_builder, cx);
 
+        let feature_flags = env::var("ZED_ENABLE_EXPERIMENTAL_FEATURES")
+            .and_then(|s| {
+                if s.is_empty() {
+                    Err(VarError::NotPresent)
+                } else {
+                    Ok(s)
+                }
+            })
+            .map_or_else(
+                |e| {
+                    if e == VarError::NotPresent {
+                        Vec::new()
+                    } else {
+                        panic!("Invalid ZED_ENABLE_EXPERIMENTAL_FEATURES: {:?}", e)
+                    }
+                },
+                |s| s.split(',').map(|s| s.to_string()).collect(),
+            );
+        cx.update_flags(false, feature_flags);
+
         cx.activate(true);
 
         cx.spawn({
-- 
2.49.0

